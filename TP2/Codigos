import pandas as pd
df_2004 = pd.read_stata("Individual_t104.dta")
df_2024 = pd.read_excel("usu_individual_T124.xlsx")
print(df_2004.head())
print(df_2024.head())
#punto 2a
df_2004_gba = df_2004[df_2004["region"] == "Gran Buenos Aires"]
df_2024_gba = df_2024[df_2024["REGION"] == "Gran Buenos Aires"]

df_a = pd.read_stata("Individual_t104.dta") 
print(df_a.shape)
df_b = pd.read_excel("usu_individual_T124.xlsx") 
print(df_b.shape)
df_a_gba = df_a[df_a["region"] == "Gran Buenos Aires"]
df_b_gba = df_b[df_b["REGION"] == "Gran Buenos Aires"]
df = pd.concat([df_a_gba, df_b_gba])  
print(df.shape)

#punto 2b
variables_2004=['CODUSU', 'nro_hogar', 'componente', 'h15', 'ano4', 'deccfr',
 'ideccfr', 'rdeccfr', 'gdeccfr', 'pdeccfr', 'adeccfr', 'pj1_1', 'pj2_1', 'pj3_1', 'idimpp']
variables_2024= ['GDECCFR' , 'PDECCFR','CODUSU', 'ANO4', 'TRIMESTRE', 'NRO_HOGAR', 'COMPONENTE', 
                 'H15', 'REGION', 'MAS_500', 'AGLOMERADO', 'PONDERA', 'CH03', 'CH04', 'CH05']
faltantes_2004=df_a[variables_2004].isna().sum()
faltantes_2024=df_b[variables_2024].isna().sum()

print("valores faltantes - año 2004")
print(faltantes_2004)
print("valores faltantes - año 2024")
print(faltantes_2024)

#punto 2c
valores_invalidos = [9, 99, 999, 99999, -7, -8, -9, 0] 
import numpy as np
for var in variables_2024:
    df[var] = df[var].replace(valores_invalidos, np.nan)
faltantes_limpios = df[variables_2024].isna().sum()
print("Valores faltantes después de limpieza(2024):")
print(faltantes_limpios)
for var in variables_2004:
    df[var] = df[var].replace(valores_invalidos, np.nan)
faltantes_limpios = df[variables_2004].isna().sum()
print("Valores faltantes después de limpieza(2004):")
print(faltantes_limpios)

#punto 3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df_2004 = df_a.copy()
df_2024 = df_b.copy()
df_2004['Sexo'] = df_2004['ch04'].replace({1: 'Varón', 2: 'Mujer'})
df_2024['Sexo'] = df_2024['CH04'].replace({1: 'Varón', 2: 'Mujer'})
df_2004['Año'] = 2004
df_2024['Año'] = 2024
df_union = pd.concat([df_2004[['Sexo', 'Año']], df_2024[['Sexo', 'Año']]])
sns.set(style="whitegrid")
sns.histplot(data=df_union, x='Sexo', hue='Año', multiple='dodge', shrink=0.8, discrete=True)
plt.title("Composición por Sexo  (2004 vs 2024)")
plt.xlabel("Sexo")
plt.ylabel("Cantidad de personas")
plt.show()
#punto4
#Matriz de correlación para 2004 y 2024
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
#Nombres de columnas a mayúsculas
df_2004.columns = df_2004.columns.str.upper()
df_2024.columns = df_2024.columns.str.upper()
# Uniformizar nombres de columnas (es fundamental que no tenga errores)
df_2004.columns = df_2004.columns.str.upper()
df_2024.columns = df_2024.columns.str.upper()

# Variables pedidas/consignas del TP
variables_corr = ['CH04', 'CH06', 'CH07', 'CH08', 'NIVEL_ED', 'ESTADO', 'CAT_INAC', 'IPCF']

# Verificamos que existan esas variables en cada dataset
vars_2004 = [var for var in variables_corr if var in df_2004.columns]
vars_2024 = [var for var in variables_corr if var in df_2024.columns]

# Seleccionamos las variables correspondientes
df_corr_2004 = df_2004[vars_2004]
df_corr_2024 = df_2024[vars_2024]

# Aseguramos que todas las columnas sean numéricas
df_corr_2004 = df_corr_2004.apply(pd.to_numeric, errors='coerce')
df_corr_2024 = df_corr_2024.apply(pd.to_numeric, errors='coerce')

# Calculamos las matrices de correlación
corr_matrix_2004 = df_corr_2004.corr()
corr_matrix_2024 = df_corr_2024.corr()

#GRAFICO MATRIZ DE CORRELACION 2004

plt.figure(figsize=(10,8))
sns.heatmap(
    corr_matrix_2004,
    annot=True,
    cmap='coolwarm', 
    linewidths=0.5,
    linecolor='black',
    vmin=-1, vmax=1
)
plt.title('Matriz de Correlación - Año 2004', fontsize=16)
plt.xticks(rotation=45)
plt.yticks(rotation=45)
plt.tight_layout()
plt.show()

# --- GRAFICO MATRIZ DE CORRELACION 2024 ---

plt.figure(figsize=(10,8))
sns.heatmap(
    corr_matrix_2024,
    annot=True,
    cmap='coolwarm',
    linewidths=0.5,
    linecolor='black',
    vmin=-1, vmax=1
)
plt.title('Matriz de Correlación - Año 2024', fontsize=16)
plt.xticks(rotation=45)
plt.yticks(rotation=45)
plt.tight_layout()
plt.show()
#Punto5
#Desocupados e inactivos
# Asegurarnos que los nombres de columnas estén en mayúsculas
df_2004.columns = df_2004.columns.str.upper()
df_2024.columns = df_2024.columns.str.upper()
#Año 2004

# Cantidad de desocupados e inactivos
cantidad_desocupados_2004 = df_2004[df_2004['ESTADO'] == 2].shape[0]
cantidad_inactivos_2004 = df_2004[df_2004['ESTADO'] == 3].shape[0]

print(f"Año 2004:")
print(f"Cantidad de desocupados: {cantidad_desocupados_2004}")
print(f"Cantidad de inactivos: {cantidad_inactivos_2004}")

# Media de ingreso per cápita familiar por estado
media_ingreso_2004 = df_2004.groupby('ESTADO')['IPCF'].mean()
print("\nMedia de IPCF por estado (2004):")
print(media_ingreso_2004)
#Año 2024

# Cantidad de desocupados e inactivos
cantidad_desocupados_2024 = df_2024[df_2024['ESTADO'] == 2].shape[0]
cantidad_inactivos_2024 = df_2024[df_2024['ESTADO'] == 3].shape[0]

print(f"\nAño 2024:")
print(f"Cantidad de desocupados: {cantidad_desocupados_2024}")
print(f"Cantidad de inactivos: {cantidad_inactivos_2024}")

# Media de ingreso per cápita familiar por estado
media_ingreso_2024 = df_2024.groupby('ESTADO')['IPCF'].mean()
print("\nMedia de IPCF por estado (2024):")
print(media_ingreso_2024)
#Punto6
# Aseguramos columnas en mayúsculas
df_2004.columns = df_2004.columns.str.upper()
df_2024.columns = df_2024.columns.str.upper()
# Año 2004 

#Quien respndío.
respondieron_2004 = df_2004[df_2004['ESTADO'] != 0]
norespondieron_2004 = df_2004[df_2004['ESTADO'] == 0]

# Cantidad/Cuantos
print(f"Año 2004:")
print(f"Cantidad de personas que NO respondieron condición de actividad: {norespondieron_2004.shape[0]}")
print(f"Cantidad de personas que respondieron: {respondieron_2004.shape[0]}")
#2024
#Respondieron
respondieron_2024 = df_2024[df_2024['ESTADO'] != 0]
norespondieron_2024 = df_2024[df_2024['ESTADO'] == 0]

# Cantidad
print(f"\nAño 2024:")
print(f"Cantidad de personas que NO respondieron condición de actividad: {norespondieron_2024.shape[0]}")
print(f"Cantidad de personas que respondieron: {respondieron_2024.shape[0]}")
